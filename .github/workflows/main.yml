# 워크 플로우 이름
name: moamoa


# 워크 플로우가 언제 실행 될지를 정한다.
#메인에 push 또느 pr이 될 때
#on:
#  push:
#    branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]


# 워크 플로우가 깃 레포에 대한 권한을 읽기 만 가능하게 설정한다. 환경변수작성 및 빈깡통 yml 작성할수도있응게
#permissions:
  #contents: read


# 워크플로우에서 할 작업 정의한다.
jobs:

  # 작업 환경 = 우분투 최신 버전 워크플로우 운영체제가 우분투라서
  build:
    runs-on: ubuntu-latest

    # 깃허브에서 제공하는 checkout 액션 사용
    steps:
    - uses: actions/checkout@v3

    # JDK 17 설정한당
    # temurin = Adoptium에서 제공하는 JDK
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

        #yml 환경변수 주입
    - name: Generate Environment Variables File for Production
      run: |
        echo "SPRING_DATASOURCE_URL: ${{ secrets.DATABASE_URL }}" >> ./src/main/resources/application.yml
        echo "SPRING_DATASOURCE_USERNAME: ${{ secrets.DATABASE_USERNAME }}" >> ./src/main/resources/application.yml
        echo "SPRING_DATASOURCE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}" >> ./src/main/resources/application.yml
        echo "SPRING_DATA_REDIS_HOST: ${{ secrets.REDIS_HOST }}" >> ./src/main/resources/application.yml
        echo "SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_CLIENT-ID: ${{ secrets.KAKAO_CLIENT_ID }}" >> ./src/main/resources/application.yml
        echo "SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_REDIRECT-URI: ${{ secrets.KAKAO_REDIRECT_URI }}" >> ./src/main/resources/application.yml
        echo "SPRING_IAMPORT_APIKEY: ${{ secrets.IAMPORT_APIKEY }}" >> ./src/main/resources/application.yml
        echo "SPRING_IAMPORT_SECRETKEY: ${{ secrets.IAMPORT_SECRETKEY }}" >> ./src/main/resources/application.yml
        echo "SPRING_AUTH_JWT_ISSUER: ${{ secrets.JWT_ISSUER }}" >> ./src/main/resources/application.yml
        echo "SPRING_AUTH_JWT_SECRET: ${{ secrets.JWT_SECRET }}" >> ./src/main/resources/application.yml
        echo "SPRING_AUTH_JWT_ACCESSTOKENEXPIRATIONHOUR: ${{ secrets.JWT_HOUR }}" >> ./src/main/resources/application.yml
        echo "CLOUD_AWS_CREDENTIALS_ACCESSKEY: ${{ secrets.S3_ACCESSKEY }}" >> ./src/main/resources/application.yml
        echo "CLOUD_AWS_CREDENTIALS_SECRETKEY: ${{ secrets.S3_SECRETKEY }}" >> ./src/main/resources/application.yml


      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
        KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
        IAMPORT_APIKEY: ${{ secrets.IAMPORT_APIKEY }}
        IAMPORT_SECRETKEY: ${{ secrets.IAMPORT_SECRETKEY }}
        S3_ACCESSKEY: ${{ secrets.S3_ACCESSKEY }}
        S3_SECRETKEY: ${{ secrets.S3_SECRETKEY }}
        JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        JWT_HOUR: ${{ secrets.JWT_HOUR }}

         # : ${{secrets. }} 빠른 복붙 양식
        
          
    # gradle wrapper 파일에 실행 권한을 부여
    # gradle wrapper = 개발자가 특정 버전의 Gradle을 미리 설치하지 않고도 Gradle 빌드를 실행할 수 있게 해주는 편리한 도구        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Gradle 빌드 엑션을 이용해서 프로젝트 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2.6.0
      with:
        arguments: build

    # 빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드!!
    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: moamoa
        path: build/libs/moamoa-0.0.1-SNAPSHOT.jar

  # 배포 **
  deploy:
    needs: build
    runs-on: ubuntu-latest

    # 위의 빌드작업한 JAR 파일 = 아티팩트를 다운로드
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: moamoa
        path: build/libs

    # EC2에 배포
    # EC2 SSH 키를 private_key.pem 파일로 저장 ( 위치는 GitHub 서버 )
    # SCP를 사용하여 JAR 파일을 EC2 서버로 복사
    # SSH를 사용하여 EC2 서버에 연결하고 현재 실행 중인 Java 프로세스를 종료한 다음 새로운 Java 프로세스 생성 및 실행!!
    ## NLP 적용하면 IP -> 도메인으로 수정 + EC2 늘리면 run 추가
    - name: Deploy to EC2
      run: |
        echo "${{ secrets.SSH_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        scp -i private_key.pem -o StrictHostKeyChecking=no build/libs/moamoa-0.0.1-SNAPSHOT.jar ${{ secrets.EC2_NAME }}@${{ secrets.EC2_IP }}:/home/${{ secrets.EC2_NAME }}/moamoa-0.0.1-SNAPSHOT.jar
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_NAME }}@${{ secrets.EC2_IP }} "pgrep java | xargs kill -9; nohup java -jar /home/${{ secrets.EC2_NAME }}/moamoa-0.0.1-SNAPSHOT.jar > app.log 2>&1 &"
        rm -f private_key.pem
